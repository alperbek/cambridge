import 'utility.dart';

class Instruction {
  int opCodeLength;
  String instruction;

  Instruction(this.opCodeLength, this.instruction);
}

class OpcodeDecoder {
  static const z80Opcodes = {
    '00': 'nop',
    '01': 'ld bc, **',
    '02': 'ld (bc), a',
    '03': 'inc bc',
    '04': 'inc b',
    '05': 'dec b',
    '06': 'ld b, *',
    '07': 'rlca',
    '08': 'ex af, af\'',
    '09': 'add hl, bc',
    '0a': 'ld a, (bc)',
    '0b': 'dec bc',
    '0c': 'inc c',
    '0d': 'dec c',
    '0e': 'ld c, *',
    '0f': 'rrca',
    '10': 'djnz *',
    '11': 'ld de, **',
    '12': 'ld (de), a',
    '13': 'inc de',
    '14': 'inc d',
    '15': 'dec d',
    '16': 'ld d, *',
    '17': 'rla',
    '18': 'jr *',
    '19': 'add hl, de',
    '1a': 'ld a, (de)',
    '1b': 'dec de',
    '1c': 'inc e',
    '1d': 'dec e',
    '1e': 'ld e, *',
    '1f': 'rra',
    '20': 'jr nz, *',
    '21': 'ld hl, **',
    '22': 'ld (**), hl',
    '23': 'inc hl',
    '24': 'inc h',
    '25': 'dec h',
    '26': 'ld h, *',
    '27': 'daa',
    '28': 'jr z, *',
    '29': 'add hl, hl',
    '2a': 'ld hl, (**)',
    '2b': 'dec hl',
    '2c': 'inc l',
    '2d': 'dec l',
    '2e': 'ld l, *',
    '2f': 'cpl',
    '30': 'jr nc, *',
    '31': 'ld sp, **',
    '32': 'ld (**), a',
    '33': 'inc sp',
    '34': 'inc (hl)',
    '35': 'dec (hl)',
    '36': 'ld (hl), *',
    '37': 'scf',
    '38': 'jr c, *',
    '39': 'add hl, sp',
    '3a': 'ld a, (**)',
    '3b': 'dec sp',
    '3c': 'inc a',
    '3d': 'dec a',
    '3e': 'ld a, *',
    '3f': 'ccf',
    '40': 'ld b, b',
    '41': 'ld b, c',
    '42': 'ld b, d',
    '43': 'ld b, e',
    '44': 'ld b, h',
    '45': 'ld b, l',
    '46': 'ld b, (hl)',
    '47': 'ld b, a',
    '48': 'ld c, b',
    '49': 'ld c, c',
    '4a': 'ld c, d',
    '4b': 'ld c, e',
    '4c': 'ld c, h',
    '4d': 'ld c, l',
    '4e': 'ld c, (hl)',
    '4f': 'ld c, a',
    '50': 'ld d, b',
    '51': 'ld d, c',
    '52': 'ld d, d',
    '53': 'ld d, e',
    '54': 'ld d, h',
    '55': 'ld d, l',
    '56': 'ld d, (hl)',
    '57': 'ld d, a',
    '58': 'ld e, b',
    '59': 'ld e, c',
    '5a': 'ld e, d',
    '5b': 'ld e, e',
    '5c': 'ld e, h',
    '5d': 'ld e, l',
    '5e': 'ld e, (hl)',
    '5f': 'ld e, a',
    '60': 'ld h, b',
    '61': 'ld h, c',
    '62': 'ld h, d',
    '63': 'ld h, e',
    '64': 'ld h, h',
    '65': 'ld h, l',
    '66': 'ld h, (hl)',
    '67': 'ld h, a',
    '68': 'ld l, b',
    '69': 'ld l, c',
    '6a': 'ld l, d',
    '6b': 'ld l, e',
    '6c': 'ld l, h',
    '6d': 'ld l, l',
    '6e': 'ld l, (hl)',
    '6f': 'ld l, a',
    '70': 'ld (hl), b',
    '71': 'ld (hl), c',
    '72': 'ld (hl), d',
    '73': 'ld (hl), e',
    '74': 'ld (hl), h',
    '75': 'ld (hl), l',
    '76': 'halt',
    '77': 'ld (hl), a',
    '78': 'ld a, b',
    '79': 'ld a, c',
    '7a': 'ld a, d',
    '7b': 'ld a, e',
    '7c': 'ld a, h',
    '7d': 'ld a, l',
    '7e': 'ld a, (hl)',
    '7f': 'ld a, a',
    '80': 'add a, b',
    '81': 'add a, c',
    '82': 'add a, d',
    '83': 'add a, e',
    '84': 'add a, h',
    '85': 'add a, l',
    '86': 'add a, (hl)',
    '87': 'add a, a',
    '88': 'adc a, b',
    '89': 'adc a, c',
    '8a': 'adc a, d',
    '8b': 'adc a, e',
    '8c': 'adc a, h',
    '8d': 'adc a, l',
    '8e': 'adc a, (hl)',
    '8f': 'adc a, a',
    '90': 'sub b',
    '91': 'sub c',
    '92': 'sub d',
    '93': 'sub e',
    '94': 'sub h',
    '95': 'sub l',
    '96': 'sub (hl)',
    '97': 'sub a',
    '98': 'sbc b',
    '99': 'sbc c',
    '9a': 'sbc d',
    '9b': 'sbc e',
    '9c': 'sbc h',
    '9d': 'sbc l',
    '9e': 'sbc (hl)',
    '9f': 'sbc a, a',
    'a0': 'and b',
    'a1': 'and c',
    'a2': 'and d',
    'a3': 'and e',
    'a4': 'and h',
    'a5': 'and l',
    'a6': 'and (hl)',
    'a7': 'and a',
    'a8': 'xor b',
    'a9': 'xor c',
    'aa': 'xor d',
    'ab': 'xor e',
    'ac': 'xor h',
    'ad': 'xor l',
    'ae': 'xor (hl)',
    'af': 'xor a',
    'b0': 'or b',
    'b1': 'or c',
    'b2': 'or d',
    'b3': 'or e',
    'b4': 'or h',
    'b5': 'or l',
    'b6': 'or (hl)',
    'b7': 'or a',
    'b8': 'cp b',
    'b9': 'cp c',
    'ba': 'cp d',
    'bb': 'cp e',
    'bc': 'cp h',
    'bd': 'cp l',
    'be': 'cp (hl)',
    'bf': 'cp a',
    'c0': 'ret nz',
    'c1': 'pop bc',
    'c2': 'jp nz, **',
    'c3': 'jp **',
    'c4': 'call nz, **',
    'c5': 'push bc',
    'c6': 'add a, *',
    'c7': 'rst 0',
    'c8': 'ret z',
    'c9': 'ret',
    'ca': 'jp z, **',
    'cb00': 'rlc b',
    'cb01': 'rlc c',
    'cb02': 'rlc d',
    'cb03': 'rlc e',
    'cb04': 'rlc h',
    'cb05': 'rlc l',
    'cb06': 'rlc (hl)',
    'cb07': 'rlc a',
    'cb08': 'rrc b',
    'cb09': 'rrc c',
    'cb0a': 'rrc d',
    'cb0b': 'rrc e',
    'cb0c': 'rrc h',
    'cb0d': 'rrc l',
    'cb0e': 'rrc (hl)',
    'cb0f': 'rrc a',
    'cb10': 'rl b',
    'cb11': 'rl c',
    'cb12': 'rl d',
    'cb13': 'rl e',
    'cb14': 'rl h',
    'cb15': 'rl l',
    'cb16': 'rl (hl)',
    'cb17': 'rl a',
    'cb18': 'rr b',
    'cb19': 'rr c',
    'cb1a': 'rr d',
    'cb1b': 'rr e',
    'cb1c': 'rr h',
    'cb1d': 'rr l',
    'cb1e': 'rr (hl)',
    'cb1f': 'rr a',
    'cb20': 'sla b',
    'cb21': 'sla c',
    'cb22': 'sla d',
    'cb23': 'sla e',
    'cb24': 'sla h',
    'cb25': 'sla l',
    'cb26': 'sla (hl)',
    'cb27': 'sla a',
    'cb28': 'sra b',
    'cb29': 'sra c',
    'cb2a': 'sra d',
    'cb2b': 'sra e',
    'cb2c': 'sra h',
    'cb2d': 'sra l',
    'cb2e': 'sra (hl)',
    'cb2f': 'sra a',
    'cb30': 'sll b',
    'cb31': 'sll c',
    'cb32': 'sll d',
    'cb33': 'sll e',
    'cb34': 'sll h',
    'cb35': 'sll l',
    'cb36': 'sll (hl)',
    'cb37': 'sll a',
    'cb38': 'srl b',
    'cb39': 'srl c',
    'cb3a': 'srl d',
    'cb3b': 'srl e',
    'cb3c': 'srl h',
    'cb3d': 'srl l',
    'cb3e': 'srl (hl)',
    'cb3f': 'srl a',
    'cb40': 'bit 0, b',
    'cb41': 'bit 0, c',
    'cb42': 'bit 0, d',
    'cb43': 'bit 0, e',
    'cb44': 'bit 0, h',
    'cb45': 'bit 0, l',
    'cb46': 'bit 0, (hl)',
    'cb47': 'bit 0, a',
    'cb48': 'bit 1, b',
    'cb49': 'bit 1, c',
    'cb4a': 'bit 1, d',
    'cb4b': 'bit 1, e',
    'cb4c': 'bit 1, h',
    'cb4d': 'bit 1, l',
    'cb4e': 'bit 1, (hl)',
    'cb4f': 'bit 1, a',
    'cb50': 'bit 2, b',
    'cb51': 'bit 2, c',
    'cb52': 'bit 2, d',
    'cb53': 'bit 2, e',
    'cb54': 'bit 2, h',
    'cb55': 'bit 2, l',
    'cb56': 'bit 2, (hl)',
    'cb57': 'bit 2, a',
    'cb58': 'bit 3, b',
    'cb59': 'bit 3, c',
    'cb5a': 'bit 3, d',
    'cb5b': 'bit 3, e',
    'cb5c': 'bit 3, h',
    'cb5d': 'bit 3, l',
    'cb5e': 'bit 3, (hl)',
    'cb5f': 'bit 3, a',
    'cb60': 'bit 4, b',
    'cb61': 'bit 4, c',
    'cb62': 'bit 4, d',
    'cb63': 'bit 4, e',
    'cb64': 'bit 4, h',
    'cb65': 'bit 4, l',
    'cb66': 'bit 4, (hl)',
    'cb67': 'bit 4, a',
    'cb68': 'bit 5, b',
    'cb69': 'bit 5, c',
    'cb6a': 'bit 5, d',
    'cb6b': 'bit 5, e',
    'cb6c': 'bit 5, h',
    'cb6d': 'bit 5, l',
    'cb6e': 'bit 5, (hl)',
    'cb6f': 'bit 5, a',
    'cb70': 'bit 6, b',
    'cb71': 'bit 6, c',
    'cb72': 'bit 6, d',
    'cb73': 'bit 6, e',
    'cb74': 'bit 6, h',
    'cb75': 'bit 6, l',
    'cb76': 'bit 6, (hl)',
    'cb77': 'bit 6, a',
    'cb78': 'bit 7, b',
    'cb79': 'bit 7, c',
    'cb7a': 'bit 7, d',
    'cb7b': 'bit 7, e',
    'cb7c': 'bit 7, h',
    'cb7d': 'bit 7, l',
    'cb7e': 'bit 7, (hl)',
    'cb7f': 'bit 7, a',
    'cb80': 'res 0, b',
    'cb81': 'res 0, c',
    'cb82': 'res 0, d',
    'cb83': 'res 0, e',
    'cb84': 'res 0, h',
    'cb85': 'res 0, l',
    'cb86': 'res 0, (hl)',
    'cb87': 'res 0, a',
    'cb88': 'res 1, b',
    'cb89': 'res 1, c',
    'cb8a': 'res 1, d',
    'cb8b': 'res 1, e',
    'cb8c': 'res 1, h',
    'cb8d': 'res 1, l',
    'cb8e': 'res 1, (hl)',
    'cb8f': 'res 1, a',
    'cb90': 'res 2, b',
    'cb91': 'res 2, c',
    'cb92': 'res 2, d',
    'cb93': 'res 2, e',
    'cb94': 'res 2, h',
    'cb95': 'res 2, l',
    'cb96': 'res 2, (hl)',
    'cb97': 'res 2, a',
    'cb98': 'res 3, b',
    'cb99': 'res 3, c',
    'cb9a': 'res 3, d',
    'cb9b': 'res 3, e',
    'cb9c': 'res 3, h',
    'cb9d': 'res 3, l',
    'cb9e': 'res 3, (hl)',
    'cb9f': 'res 3, a',
    'cba0': 'res 4, b',
    'cba1': 'res 4, c',
    'cba2': 'res 4, d',
    'cba3': 'res 4, e',
    'cba4': 'res 4, h',
    'cba5': 'res 4, l',
    'cba6': 'res 4, (hl)',
    'cba7': 'res 4, a',
    'cba8': 'res 5, b',
    'cba9': 'res 5, c',
    'cbaa': 'res 5, d',
    'cbab': 'res 5, e',
    'cbac': 'res 5, h',
    'cbad': 'res 5, l',
    'cbae': 'res 5, (hl)',
    'cbaf': 'res 5, a',
    'cbb0': 'res 6, b',
    'cbb1': 'res 6, c',
    'cbb2': 'res 6, d',
    'cbb3': 'res 6, e',
    'cbb4': 'res 6, h',
    'cbb5': 'res 6, l',
    'cbb6': 'res 6, (hl)',
    'cbb7': 'res 6, a',
    'cbb8': 'res 7, b',
    'cbb9': 'res 7, c',
    'cbba': 'res 7, d',
    'cbbb': 'res 7, e',
    'cbbc': 'res 7, h',
    'cbbd': 'res 7, l',
    'cbbe': 'res 7, (hl)',
    'cbbf': 'res 7, a',
    'cbc0': 'set 0, b',
    'cbc1': 'set 0, c',
    'cbc2': 'set 0, d',
    'cbc3': 'set 0, e',
    'cbc4': 'set 0, h',
    'cbc5': 'set 0, l',
    'cbc6': 'set 0, (hl)',
    'cbc7': 'set 0, a',
    'cbc8': 'set 1, b',
    'cbc9': 'set 1, c',
    'cbca': 'set 1, d',
    'cbcb': 'set 1, e',
    'cbcc': 'set 1, h',
    'cbcd': 'set 1, l',
    'cbce': 'set 1, (hl)',
    'cbcf': 'set 1, a',
    'cbd0': 'set 2, b',
    'cbd1': 'set 2, c',
    'cbd2': 'set 2, d',
    'cbd3': 'set 2, e',
    'cbd4': 'set 2, h',
    'cbd5': 'set 2, l',
    'cbd6': 'set 2, (hl)',
    'cbd7': 'set 2, a',
    'cbd8': 'set 3, b',
    'cbd9': 'set 3, c',
    'cbda': 'set 3, d',
    'cbdb': 'set 3, e',
    'cbdc': 'set 3, h',
    'cbdd': 'set 3, l',
    'cbde': 'set 3, (hl)',
    'cbdf': 'set 3, a',
    'cbe0': 'set 4, b',
    'cbe1': 'set 4, c',
    'cbe2': 'set 4, d',
    'cbe3': 'set 4, e',
    'cbe4': 'set 4, h',
    'cbe5': 'set 4, l',
    'cbe6': 'set 4, (hl)',
    'cbe7': 'set 4, a',
    'cbe8': 'set 5, b',
    'cbe9': 'set 5, c',
    'cbea': 'set 5, d',
    'cbeb': 'set 5, e',
    'cbec': 'set 5, h',
    'cbed': 'set 5, l',
    'cbee': 'set 5, (hl)',
    'cbef': 'set 5, a',
    'cbf0': 'set 6, b',
    'cbf1': 'set 6, c',
    'cbf2': 'set 6, d',
    'cbf3': 'set 6, e',
    'cbf4': 'set 6, h',
    'cbf5': 'set 6, l',
    'cbf6': 'set 6, (hl)',
    'cbf7': 'set 6, a',
    'cbf8': 'set 7, b',
    'cbf9': 'set 7, c',
    'cbfa': 'set 7, d',
    'cbfb': 'set 7, e',
    'cbfc': 'set 7, h',
    'cbfd': 'set 7, l',
    'cbfe': 'set 7, (hl)',
    'cbff': 'set 7, a',
    'cc': 'call z, **',
    'cd': 'call **',
    'ce': 'adc a, *',
    'cf': 'rst 8h',
    'd0': 'ret nc',
    'd1': 'pop de',
    'd2': 'jp nc, **',
    'd3': 'out (*), a',
    'd4': 'call nc, **',
    'd5': 'push de',
    'd6': 'sub *',
    'd7': 'rst 10h',
    'd8': 'ret c',
    'd9': 'exx',
    'da': 'jp c, **',
    'db': 'in a, (*)',
    'dc': 'call c, **',
    'dd09': 'add ix, bc',
    'dd19': 'add ix, de',
    'dd21': 'ld ix, **',
    'dd22': 'ld (**), ix',
    'dd23': 'inc ix',
    'dd24': 'inc ixh',
    'dd26': 'ld ixh, *',
    'dd29': 'add ix, ix',
    'dd2a': 'ld ix, (**)',
    'dd2b': 'dec ix',
    'dd2c': 'inc ixl',
    'dd34': 'inc (ix+*)',
    'dd35': 'dec (ix+*)',
    'dd36': 'ld (ix+*), *',
    'dd39': 'add ix, sp',
    'dd44': 'ld b, ixh',
    'dd45': 'ld b, ixl',
    'dd46': 'ld b, (ix+*)',
    'dd4c': 'ld c, ixh',
    'dd4d': 'ld c, ixl',
    'dd4e': 'ld c, (ix+*)',
    'dd54': 'ld d, ixh',
    'dd55': 'ld d, ixl',
    'dd56': 'ld d, (ix+*)',
    'dd5c': 'ld e, ixh',
    'dd5d': 'ld e, ixl',
    'dd5e': 'ld e, (ix+*)',
    'dd60': 'ld ixh, b',
    'dd61': 'ld ixh, c',
    'dd62': 'ld ixh, d',
    'dd63': 'ld ixh, e',
    'dd64': 'ld ixh, h',
    'dd65': 'ld ixh, l',
    'dd66': 'ld h, (ix+*)',
    'dd67': 'ld ixh, a',
    'dd68': 'ld ixl, b',
    'dd69': 'ld ixl, c',
    'dd6a': 'ld ixl, d',
    'dd6b': 'ld ixl, e',
    'dd6c': 'ld ixl, h',
    'dd6d': 'ld ixl, l',
    'dd6e': 'ld l, (ix+*)',
    'dd6f': 'ld ixl, a',
    'dd70': 'ld (ix+*), b',
    'dd71': 'ld (ix+*), c',
    'dd72': 'ld (ix+*), d',
    'dd73': 'ld (ix+*), e',
    'dd74': 'ld (ix+*), h',
    'dd75': 'ld (ix+*), l',
    'dd77': 'ld (ix+*), a',
    'dd7c': 'ld a, ixh',
    'dd7d': 'ld a, ixl',
    'dd7e': 'ld a, (ix+*)',
    'dd84': 'add a, ixh',
    'dd85': 'add a, ixl',
    'dd86': 'add a, (ix+*)',
    'dd8c': 'adc a, ixh',
    'dd8d': 'adc a, ixl',
    'dd8e': 'adc a, (ix+*)',
    'dd94': 'sub ixh',
    'dd95': 'sub ixl',
    'dd96': 'sub (ix+*)',
    'dd9c': 'sbc ixh',
    'dd9d': 'sbc ixl',
    'dd9e': 'sbc a, (ix+*)',
    'dda4': 'and ixh',
    'dda5': 'and ixl',
    'dda6': 'and (ix+*)',
    'ddac': 'xor ixh',
    'ddad': 'xor ixl',
    'ddae': 'xor (ix+*)',
    'ddb4': 'or ixh',
    'ddb5': 'or ixl',
    'ddb6': 'or (ix+*)',
    'ddbc': 'cp ixh',
    'ddbd': 'cp ixl',
    'ddbe': 'cp (ix+*)',
    'ddcb00': 'rlc (ix+*), b',
    'ddcb01': 'rlc (ix+*), c',
    'ddcb02': 'rlc (ix+*), d',
    'ddcb03': 'rlc (ix+*), e',
    'ddcb04': 'rlc (ix+*), h',
    'ddcb05': 'rlc (ix+*), l',
    'ddcb06': 'rlc (ix+*)',
    'ddcb07': 'rlc (ix+*), a',
    'ddcb08': 'rrc (ix+*), b',
    'ddcb09': 'rrc (ix+*), c',
    'ddcb0a': 'rrc (ix+*), d',
    'ddcb0b': 'rrc (ix+*), e',
    'ddcb0c': 'rrc (ix+*), h',
    'ddcb0d': 'rrc (ix+*), l',
    'ddcb0e': 'rrc (ix+*)',
    'ddcb0f': 'rrc (ix+*), a',
    'ddcb10': 'rl (ix+*), b',
    'ddcb11': 'rl (ix+*), c',
    'ddcb12': 'rl (ix+*), d',
    'ddcb13': 'rl (ix+*), e',
    'ddcb14': 'rl (ix+*), h',
    'ddcb15': 'rl (ix+*), l',
    'ddcb16': 'rl (ix+*)',
    'ddcb17': 'rl (ix+*), a',
    'ddcb18': 'rr (ix+*), b',
    'ddcb19': 'rr (ix+*), c',
    'ddcb1a': 'rr (ix+*), d',
    'ddcb1b': 'rr (ix+*), e',
    'ddcb1c': 'rr (ix+*), h',
    'ddcb1d': 'rr (ix+*), l',
    'ddcb1e': 'rr (ix+*)',
    'ddcb1f': 'rr (ix+*), a',
    'ddcb20': 'sla (ix+*), b',
    'ddcb21': 'sla (ix+*), c',
    'ddcb22': 'sla (ix+*), d',
    'ddcb23': 'sla (ix+*), e',
    'ddcb24': 'sla (ix+*), h',
    'ddcb25': 'sla (ix+*), l',
    'ddcb26': 'sla (ix+*)',
    'ddcb27': 'sla (ix+*), a',
    'ddcb28': 'sra (ix+*), b',
    'ddcb29': 'sra (ix+*), c',
    'ddcb2a': 'sra (ix+*), d',
    'ddcb2b': 'sra (ix+*), e',
    'ddcb2c': 'sra (ix+*), h',
    'ddcb2d': 'sra (ix+*), l',
    'ddcb2e': 'sra (ix+*)',
    'ddcb2f': 'sra (ix+*), a',
    'ddcb30': 'sll (ix+*), b',
    'ddcb31': 'sll (ix+*), c',
    'ddcb32': 'sll (ix+*), d',
    'ddcb33': 'sll (ix+*), e',
    'ddcb34': 'sll (ix+*), h',
    'ddcb35': 'sll (ix+*), l',
    'ddcb36': 'sll (ix+*)',
    'ddcb37': 'sll (ix+*), a',
    'ddcb38': 'srl (ix+*), b',
    'ddcb39': 'srl (ix+*), c',
    'ddcb3a': 'srl (ix+*), d',
    'ddcb3b': 'srl (ix+*), e',
    'ddcb3c': 'srl (ix+*), h',
    'ddcb3d': 'srl (ix+*), l',
    'ddcb3e': 'srl (ix+*)',
    'ddcb3f': 'srl (ix+*), a',
    'ddcb40': 'bit 0, (ix+*)',
    'ddcb41': 'bit 0, (ix+*)',
    'ddcb42': 'bit 0, (ix+*)',
    'ddcb43': 'bit 0, (ix+*)',
    'ddcb44': 'bit 0, (ix+*)',
    'ddcb45': 'bit 0, (ix+*)',
    'ddcb46': 'bit 0, (ix+*)',
    'ddcb47': 'bit 0, (ix+*)',
    'ddcb48': 'bit 1, (ix+*)',
    'ddcb49': 'bit 1, (ix+*)',
    'ddcb4a': 'bit 1, (ix+*)',
    'ddcb4b': 'bit 1, (ix+*)',
    'ddcb4c': 'bit 1, (ix+*)',
    'ddcb4d': 'bit 1, (ix+*)',
    'ddcb4e': 'bit 1, (ix+*)',
    'ddcb4f': 'bit 1, (ix+*)',
    'ddcb50': 'bit 2, (ix+*)',
    'ddcb51': 'bit 2, (ix+*)',
    'ddcb52': 'bit 2, (ix+*)',
    'ddcb53': 'bit 2, (ix+*)',
    'ddcb54': 'bit 2, (ix+*)',
    'ddcb55': 'bit 2, (ix+*)',
    'ddcb56': 'bit 2, (ix+*)',
    'ddcb57': 'bit 2, (ix+*)',
    'ddcb58': 'bit 3, (ix+*)',
    'ddcb59': 'bit 3, (ix+*)',
    'ddcb5a': 'bit 3, (ix+*)',
    'ddcb5b': 'bit 3, (ix+*)',
    'ddcb5c': 'bit 3, (ix+*)',
    'ddcb5d': 'bit 3, (ix+*)',
    'ddcb5e': 'bit 3, (ix+*)',
    'ddcb5f': 'bit 3, (ix+*)',
    'ddcb60': 'bit 4, (ix+*)',
    'ddcb61': 'bit 4, (ix+*)',
    'ddcb62': 'bit 4, (ix+*)',
    'ddcb63': 'bit 4, (ix+*)',
    'ddcb64': 'bit 4, (ix+*)',
    'ddcb65': 'bit 4, (ix+*)',
    'ddcb66': 'bit 4, (ix+*)',
    'ddcb67': 'bit 4, (ix+*)',
    'ddcb68': 'bit 5, (ix+*)',
    'ddcb69': 'bit 5, (ix+*)',
    'ddcb6a': 'bit 5, (ix+*)',
    'ddcb6b': 'bit 5, (ix+*)',
    'ddcb6c': 'bit 5, (ix+*)',
    'ddcb6d': 'bit 5, (ix+*)',
    'ddcb6e': 'bit 5, (ix+*)',
    'ddcb6f': 'bit 5, (ix+*)',
    'ddcb70': 'bit 6, (ix+*)',
    'ddcb71': 'bit 6, (ix+*)',
    'ddcb72': 'bit 6, (ix+*)',
    'ddcb73': 'bit 6, (ix+*)',
    'ddcb74': 'bit 6, (ix+*)',
    'ddcb75': 'bit 6, (ix+*)',
    'ddcb76': 'bit 6, (ix+*)',
    'ddcb77': 'bit 6, (ix+*)',
    'ddcb78': 'bit 7, (ix+*)',
    'ddcb79': 'bit 7, (ix+*)',
    'ddcb7a': 'bit 7, (ix+*)',
    'ddcb7b': 'bit 7, (ix+*)',
    'ddcb7c': 'bit 7, (ix+*)',
    'ddcb7d': 'bit 7, (ix+*)',
    'ddcb7e': 'bit 7, (ix+*)',
    'ddcb7f': 'bit 7, (ix+*)',
    'ddcb80': 'res 0, (ix+*)',
    'ddcb81': 'res 0, (ix+*)',
    'ddcb82': 'res 0, (ix+*)',
    'ddcb83': 'res 0, (ix+*)',
    'ddcb84': 'res 0, (ix+*)',
    'ddcb85': 'res 0, (ix+*)',
    'ddcb86': 'res 0, (ix+*)',
    'ddcb87': 'res 0, (ix+*)',
    'ddcb88': 'res 1, (ix+*)',
    'ddcb89': 'res 1, (ix+*)',
    'ddcb8a': 'res 1, (ix+*)',
    'ddcb8b': 'res 1, (ix+*)',
    'ddcb8c': 'res 1, (ix+*)',
    'ddcb8d': 'res 1, (ix+*)',
    'ddcb8e': 'res 1, (ix+*)',
    'ddcb8f': 'res 1, (ix+*)',
    'ddcb90': 'res 2, (ix+*)',
    'ddcb91': 'res 2, (ix+*)',
    'ddcb92': 'res 2, (ix+*)',
    'ddcb93': 'res 2, (ix+*)',
    'ddcb94': 'res 2, (ix+*)',
    'ddcb95': 'res 2, (ix+*)',
    'ddcb96': 'res 2, (ix+*)',
    'ddcb97': 'res 2, (ix+*)',
    'ddcb98': 'res 3, (ix+*)',
    'ddcb99': 'res 3, (ix+*)',
    'ddcb9a': 'res 3, (ix+*)',
    'ddcb9b': 'res 3, (ix+*)',
    'ddcb9c': 'res 3, (ix+*)',
    'ddcb9d': 'res 3, (ix+*)',
    'ddcb9e': 'res 3, (ix+*)',
    'ddcb9f': 'res 3, (ix+*)',
    'ddcba0': 'res 4, (ix+*)',
    'ddcba1': 'res 4, (ix+*)',
    'ddcba2': 'res 4, (ix+*)',
    'ddcba3': 'res 4, (ix+*)',
    'ddcba4': 'res 4, (ix+*)',
    'ddcba5': 'res 4, (ix+*)',
    'ddcba6': 'res 4, (ix+*)',
    'ddcba7': 'res 4, (ix+*)',
    'ddcba8': 'res 5, (ix+*)',
    'ddcba9': 'res 5, (ix+*)',
    'ddcbaa': 'res 5, (ix+*)',
    'ddcbab': 'res 5, (ix+*)',
    'ddcbac': 'res 5, (ix+*)',
    'ddcbad': 'res 5, (ix+*)',
    'ddcbae': 'res 5, (ix+*)',
    'ddcbaf': 'res 5, (ix+*)',
    'ddcbb0': 'res 6, (ix+*)',
    'ddcbb1': 'res 6, (ix+*)',
    'ddcbb2': 'res 6, (ix+*)',
    'ddcbb3': 'res 6, (ix+*)',
    'ddcbb4': 'res 6, (ix+*)',
    'ddcbb5': 'res 6, (ix+*)',
    'ddcbb6': 'res 6, (ix+*)',
    'ddcbb7': 'res 6, (ix+*)',
    'ddcbb8': 'res 7, (ix+*)',
    'ddcbb9': 'res 7, (ix+*)',
    'ddcbba': 'res 7, (ix+*)',
    'ddcbbb': 'res 7, (ix+*)',
    'ddcbbc': 'res 7, (ix+*)',
    'ddcbbd': 'res 7, (ix+*)',
    'ddcbbe': 'res 7, (ix+*)',
    'ddcbbf': 'res 7, (ix+*)',
    'ddcbc0': 'set 0, (ix+*)',
    'ddcbc1': 'set 0, (ix+*)',
    'ddcbc2': 'set 0, (ix+*)',
    'ddcbc3': 'set 0, (ix+*)',
    'ddcbc4': 'set 0, (ix+*)',
    'ddcbc5': 'set 0, (ix+*)',
    'ddcbc6': 'set 0, (ix+*)',
    'ddcbc7': 'set 0, (ix+*)',
    'ddcbc8': 'set 1, (ix+*)',
    'ddcbc9': 'set 1, (ix+*)',
    'ddcbca': 'set 1, (ix+*)',
    'ddcbcb': 'set 1, (ix+*)',
    'ddcbcc': 'set 1, (ix+*)',
    'ddcbcd': 'set 1, (ix+*)',
    'ddcbce': 'set 1, (ix+*)',
    'ddcbcf': 'set 1, (ix+*)',
    'ddcbd0': 'set 2, (ix+*)',
    'ddcbd1': 'set 2, (ix+*)',
    'ddcbd2': 'set 2, (ix+*)',
    'ddcbd3': 'set 2, (ix+*)',
    'ddcbd4': 'set 2, (ix+*)',
    'ddcbd5': 'set 2, (ix+*)',
    'ddcbd6': 'set 2, (ix+*)',
    'ddcbd7': 'set 2, (ix+*)',
    'ddcbd8': 'set 3, (ix+*)',
    'ddcbd9': 'set 3, (ix+*)',
    'ddcbda': 'set 3, (ix+*)',
    'ddcbdb': 'set 3, (ix+*)',
    'ddcbdc': 'set 3, (ix+*)',
    'ddcbdd': 'set 3, (ix+*)',
    'ddcbde': 'set 3, (ix+*)',
    'ddcbdf': 'set 3, (ix+*)',
    'ddcbe0': 'set 4, (ix+*)',
    'ddcbe1': 'set 4, (ix+*)',
    'ddcbe2': 'set 4, (ix+*)',
    'ddcbe3': 'set 4, (ix+*)',
    'ddcbe4': 'set 4, (ix+*)',
    'ddcbe5': 'set 4, (ix+*)',
    'ddcbe6': 'set 4, (ix+*)',
    'ddcbe7': 'set 4, (ix+*)',
    'ddcbe8': 'set 5, (ix+*)',
    'ddcbe9': 'set 5, (ix+*)',
    'ddcbea': 'set 5, (ix+*)',
    'ddcbeb': 'set 5, (ix+*)',
    'ddcbec': 'set 5, (ix+*)',
    'ddcbed': 'set 5, (ix+*)',
    'ddcbee': 'set 5, (ix+*)',
    'ddcbef': 'set 5, (ix+*)',
    'ddcbf0': 'set 6, (ix+*)',
    'ddcbf1': 'set 6, (ix+*)',
    'ddcbf2': 'set 6, (ix+*)',
    'ddcbf3': 'set 6, (ix+*)',
    'ddcbf4': 'set 6, (ix+*)',
    'ddcbf5': 'set 6, (ix+*)',
    'ddcbf6': 'set 6, (ix+*)',
    'ddcbf7': 'set 6, (ix+*)',
    'ddcbf8': 'set 7, (ix+*)',
    'ddcbf9': 'set 7, (ix+*)',
    'ddcbfa': 'set 7, (ix+*)',
    'ddcbfb': 'set 7, (ix+*)',
    'ddcbfc': 'set 7, (ix+*)',
    'ddcbfd': 'set 7, (ix+*)',
    'ddcbfe': 'set 7, (ix+*)',
    'ddcbff': 'set 7, (ix+*)',
    'dde1': 'pop ix',
    'dde3': 'ex (sp), ix',
    'dde5': 'push ix',
    'dde9': 'jp (ix)',
    'ddf9': 'ld sp, ix',
    'de': 'sbc a, *',
    'df': 'rst 18h',
    'e0': 'ret po',
    'e1': 'pop hl',
    'e2': 'jp po, **',
    'e3': 'ex (sp), hl',
    'e4': 'call po, **',
    'e5': 'push hl',
    'e6': 'and *',
    'e7': 'rst 20h',
    'e8': 'ret pe',
    'e9': 'jp (hl)',
    'ea': 'jp pe, **',
    'eb': 'ex de, hl',
    'ec': 'call pe, **',
    'ed40': 'in b, (c)',
    'ed41': 'out (c), b',
    'ed42': 'sbc hl, bc',
    'ed43': 'ld (**), bc',
    'ed44': 'neg',
    'ed45': 'retn',
    'ed46': 'im 0',
    'ed47': 'ld i, a',
    'ed48': 'in c, (c)',
    'ed49': 'out (c), c',
    'ed4a': 'adc hl, bc',
    'ed4b': 'ld bc, (**)',
    'ed4d': 'reti',
    'ed4f': 'ld r, a',
    'ed50': 'in d, (c)',
    'ed51': 'out (c), d',
    'ed52': 'sbc hl, de',
    'ed53': 'ld (**), de',
    'ed55': 'retn',
    'ed56': 'im 1',
    'ed57': 'ld a, i',
    'ed58': 'in e, (c)',
    'ed59': 'out (c), e',
    'ed5a': 'adc hl, de',
    'ed5b': 'ld de, (**)',
    'ed5d': 'retn',
    'ed5e': 'im 2',
    'ed5f': 'ld a, r',
    'ed60': 'in h, (c)',
    'ed61': 'out (c), h',
    'ed62': 'sbc hl, hl',
    'ed65': 'retn',
    'ed67': 'rrd',
    'ed68': 'in l, (c)',
    'ed69': 'out (c), l',
    'ed6a': 'adc hl, hl',
    'ed6d': 'reti',
    'ed6f': 'rld',
    'ed70': 'in (c)',
    'ed71': 'out (c), 0',
    'ed72': 'sbc hl, sp',
    'ed73': 'ld (**), sp',
    'ed75': 'retn',
    'ed78': 'in a, (c)',
    'ed79': 'out (c), a',
    'ed7a': 'adc hl, sp',
    'ed7b': 'ld sp, (**)',
    'ed7d': 'retn',
    'eda0': 'ldi',
    'eda1': 'cpi',
    'eda2': 'ini',
    'eda3': 'outi',
    'eda8': 'ldd',
    'eda9': 'cpd',
    'edaa': 'ind',
    'edab': 'outd',
    'edb0': 'ldir',
    'edb1': 'cpir',
    'edb2': 'inir',
    'edb3': 'otir',
    'edb8': 'lddr',
    'edb9': 'cpdr',
    'edba': 'indr',
    'edbb': 'otdr',
    'ee': 'xor *',
    'ef': 'rst 28h',
    'f0': 'ret p',
    'f1': 'pop af',
    'f2': 'jp p, **',
    'f3': 'di',
    'f4': 'call p, **',
    'f5': 'push af',
    'f6': 'or *',
    'f7': 'rst 30h',
    'f8': 'ret m',
    'f9': 'ld sp, hl',
    'fa': 'jp m, **',
    'fb': 'ei',
    'fc': 'call m, **',
    'fd09': 'add iy, bc',
    'fd19': 'add iy, de',
    'fd21': 'ld iy, **',
    'fd22': 'ld (**), iy',
    'fd23': 'inc iy',
    'fd24': 'inc iyh',
    'fd26': 'ld iyh, *',
    'fd29': 'add iy, iy',
    'fd2a': 'ld iy, (**)',
    'fd2b': 'dec iy',
    'fd2c': 'inc iyl',
    'fd2e': 'ld ixl, *',
    'fd34': 'inc (iy+*)',
    'fd35': 'dec (iy+*)',
    'fd36': 'ld (iy+*), *',
    'fd39': 'add iy, sp',
    'fd44': 'ld b, iyh',
    'fd45': 'ld b, iyl',
    'fd46': 'ld b, (iy+*)',
    'fd4c': 'ld c, iyh',
    'fd4d': 'ld c, iyl',
    'fd4e': 'ld c, (iy+*)',
    'fd54': 'ld d, iyh',
    'fd55': 'ld d, iyl',
    'fd56': 'ld d, (iy+*)',
    'fd5c': 'ld e, iyh',
    'fd5d': 'ld e, iyl',
    'fd5e': 'ld e, (iy+*)',
    'fd60': 'ld iyh, b',
    'fd61': 'ld iyh, c',
    'fd62': 'ld iyh, d',
    'fd63': 'ld iyh, e',
    'fd64': 'ld iyh, h',
    'fd65': 'ld iyh, l',
    'fd66': 'ld h, (iy+*)',
    'fd67': 'ld iyh, a',
    'fd68': 'ld iyl, b',
    'fd69': 'ld iyl, c',
    'fd6a': 'ld iyl, d',
    'fd6b': 'ld iyl, e',
    'fd6c': 'ld iyl, h',
    'fd6d': 'ld iyl, l',
    'fd6e': 'ld l, (iy+*)',
    'fd6f': 'ld iyl, a',
    'fd70': 'ld (iy+*), b',
    'fd71': 'ld (iy+*), c',
    'fd72': 'ld (iy+*), d',
    'fd73': 'ld (iy+*), e',
    'fd74': 'ld (iy+*), h',
    'fd75': 'ld (iy+*), l',
    'fd77': 'ld (iy+*), a',
    'fd7c': 'ld a, iyh',
    'fd7d': 'ld a, iyl',
    'fd7e': 'ld a, (iy+*)',
    'fd84': 'add a, iyh',
    'fd85': 'add a, iyl',
    'fd86': 'add a, (iy+*)',
    'fd8c': 'adc a, iyh',
    'fd8d': 'adc a, iyl',
    'fd8e': 'adc a, (iy+*)',
    'fd94': 'sub iyh',
    'fd95': 'sub iyl',
    'fd96': 'sub (iy+*)',
    'fd9c': 'sbc iyh',
    'fd9d': 'sbc iyl',
    'fd9e': 'sbc a, (iy+*)',
    'fda4': 'and iyh',
    'fda5': 'and iyl',
    'fda6': 'and (iy+*)',
    'fdac': 'xor iyh',
    'fdad': 'xor iyl',
    'fdae': 'xor (iy+*)',
    'fdb4': 'or iyh',
    'fdb5': 'or iyl',
    'fdb6': 'or (iy+*)',
    'fdbc': 'cp iyh',
    'fdbd': 'cp iyl',
    'fdbe': 'cp (iy+*)',
    'fdcb00': 'rlc (iy+*), b',
    'fdcb01': 'rlc (iy+*), c',
    'fdcb02': 'rlc (iy+*), d',
    'fdcb03': 'rlc (iy+*), e',
    'fdcb04': 'rlc (iy+*), h',
    'fdcb05': 'rlc (iy+*), l',
    'fdcb06': 'rlc (iy+*)',
    'fdcb07': 'rlc (iy+*), a',
    'fdcb08': 'rrc (iy+*), b',
    'fdcb09': 'rrc (iy+*), c',
    'fdcb0a': 'rrc (iy+*), d',
    'fdcb0b': 'rrc (iy+*), e',
    'fdcb0c': 'rrc (iy+*), h',
    'fdcb0d': 'rrc (iy+*), l',
    'fdcb0e': 'rrc (iy+*)',
    'fdcb0f': 'rrc (iy+*), a',
    'fdcb10': 'rl (iy+*), b',
    'fdcb11': 'rl (iy+*), c',
    'fdcb12': 'rl (iy+*), d',
    'fdcb13': 'rl (iy+*), e',
    'fdcb14': 'rl (iy+*), h',
    'fdcb15': 'rl (iy+*), l',
    'fdcb16': 'rl (iy+*)',
    'fdcb17': 'rl (iy+*), a',
    'fdcb18': 'rr (iy+*), b',
    'fdcb19': 'rr (iy+*), c',
    'fdcb1a': 'rr (iy+*), d',
    'fdcb1b': 'rr (iy+*), e',
    'fdcb1c': 'rr (iy+*), h',
    'fdcb1d': 'rr (iy+*), l',
    'fdcb1e': 'rr (iy+*)',
    'fdcb1f': 'rr (iy+*), a',
    'fdcb20': 'sla (iy+*), b',
    'fdcb21': 'sla (iy+*), c',
    'fdcb22': 'sla (iy+*), d',
    'fdcb23': 'sla (iy+*), e',
    'fdcb24': 'sla (iy+*), h',
    'fdcb25': 'sla (iy+*), l',
    'fdcb26': 'sla (iy+*)',
    'fdcb27': 'sla (iy+*), a',
    'fdcb28': 'sra (iy+*), b',
    'fdcb29': 'sra (iy+*), c',
    'fdcb2a': 'sra (iy+*), d',
    'fdcb2b': 'sra (iy+*), e',
    'fdcb2c': 'sra (iy+*), h',
    'fdcb2d': 'sra (iy+*), l',
    'fdcb2e': 'sra (iy+*)',
    'fdcb2f': 'sra (iy+*), a',
    'fdcb30': 'sll (iy+*), b',
    'fdcb31': 'sll (iy+*), c',
    'fdcb32': 'sll (iy+*), d',
    'fdcb33': 'sll (iy+*), e',
    'fdcb34': 'sll (iy+*), h',
    'fdcb35': 'sll (iy+*), l',
    'fdcb36': 'sll (iy+*)',
    'fdcb37': 'sll (iy+*), a',
    'fdcb38': 'srl (iy+*), b',
    'fdcb39': 'srl (iy+*), c',
    'fdcb3a': 'srl (iy+*), d',
    'fdcb3b': 'srl (iy+*), e',
    'fdcb3c': 'srl (iy+*), h',
    'fdcb3d': 'srl (iy+*), l',
    'fdcb3e': 'srl (iy+*)',
    'fdcb3f': 'srl (iy+*), a',
    'fdcb40': 'bit 0, (iy+*)',
    'fdcb41': 'bit 0, (iy+*)',
    'fdcb42': 'bit 0, (iy+*)',
    'fdcb43': 'bit 0, (iy+*)',
    'fdcb44': 'bit 0, (iy+*)',
    'fdcb45': 'bit 0, (iy+*)',
    'fdcb46': 'bit 0, (iy+*)',
    'fdcb47': 'bit 0, (iy+*)',
    'fdcb48': 'bit 1, (iy+*)',
    'fdcb49': 'bit 1, (iy+*)',
    'fdcb4a': 'bit 1, (iy+*)',
    'fdcb4b': 'bit 1, (iy+*)',
    'fdcb4c': 'bit 1, (iy+*)',
    'fdcb4d': 'bit 1, (iy+*)',
    'fdcb4e': 'bit 1, (iy+*)',
    'fdcb4f': 'bit 1, (iy+*)',
    'fdcb50': 'bit 2, (iy+*)',
    'fdcb51': 'bit 2, (iy+*)',
    'fdcb52': 'bit 2, (iy+*)',
    'fdcb53': 'bit 2, (iy+*)',
    'fdcb54': 'bit 2, (iy+*)',
    'fdcb55': 'bit 2, (iy+*)',
    'fdcb56': 'bit 2, (iy+*)',
    'fdcb57': 'bit 2, (iy+*)',
    'fdcb58': 'bit 3, (iy+*)',
    'fdcb59': 'bit 3, (iy+*)',
    'fdcb5a': 'bit 3, (iy+*)',
    'fdcb5b': 'bit 3, (iy+*)',
    'fdcb5c': 'bit 3, (iy+*)',
    'fdcb5d': 'bit 3, (iy+*)',
    'fdcb5e': 'bit 3, (iy+*)',
    'fdcb5f': 'bit 3, (iy+*)',
    'fdcb60': 'bit 4, (iy+*)',
    'fdcb61': 'bit 4, (iy+*)',
    'fdcb62': 'bit 4, (iy+*)',
    'fdcb63': 'bit 4, (iy+*)',
    'fdcb64': 'bit 4, (iy+*)',
    'fdcb65': 'bit 4, (iy+*)',
    'fdcb66': 'bit 4, (iy+*)',
    'fdcb67': 'bit 4, (iy+*)',
    'fdcb68': 'bit 5, (iy+*)',
    'fdcb69': 'bit 5, (iy+*)',
    'fdcb6a': 'bit 5, (iy+*)',
    'fdcb6b': 'bit 5, (iy+*)',
    'fdcb6c': 'bit 5, (iy+*)',
    'fdcb6d': 'bit 5, (iy+*)',
    'fdcb6e': 'bit 5, (iy+*)',
    'fdcb6f': 'bit 5, (iy+*)',
    'fdcb70': 'bit 6, (iy+*)',
    'fdcb71': 'bit 6, (iy+*)',
    'fdcb72': 'bit 6, (iy+*)',
    'fdcb73': 'bit 6, (iy+*)',
    'fdcb74': 'bit 6, (iy+*)',
    'fdcb75': 'bit 6, (iy+*)',
    'fdcb76': 'bit 6, (iy+*)',
    'fdcb77': 'bit 6, (iy+*)',
    'fdcb78': 'bit 7, (iy+*)',
    'fdcb79': 'bit 7, (iy+*)',
    'fdcb7a': 'bit 7, (iy+*)',
    'fdcb7b': 'bit 7, (iy+*)',
    'fdcb7c': 'bit 7, (iy+*)',
    'fdcb7d': 'bit 7, (iy+*)',
    'fdcb7e': 'bit 7, (iy+*)',
    'fdcb7f': 'bit 7, (iy+*)',
    'fdcb80': 'res 0, (iy+*)',
    'fdcb81': 'res 0, (iy+*)',
    'fdcb82': 'res 0, (iy+*)',
    'fdcb83': 'res 0, (iy+*)',
    'fdcb84': 'res 0, (iy+*)',
    'fdcb85': 'res 0, (iy+*)',
    'fdcb86': 'res 0, (iy+*)',
    'fdcb87': 'res 0, (iy+*)',
    'fdcb88': 'res 1, (iy+*)',
    'fdcb89': 'res 1, (iy+*)',
    'fdcb8a': 'res 1, (iy+*)',
    'fdcb8b': 'res 1, (iy+*)',
    'fdcb8c': 'res 1, (iy+*)',
    'fdcb8d': 'res 1, (iy+*)',
    'fdcb8e': 'res 1, (iy+*)',
    'fdcb8f': 'res 1, (iy+*)',
    'fdcb90': 'res 2, (iy+*)',
    'fdcb91': 'res 2, (iy+*)',
    'fdcb92': 'res 2, (iy+*)',
    'fdcb93': 'res 2, (iy+*)',
    'fdcb94': 'res 2, (iy+*)',
    'fdcb95': 'res 2, (iy+*)',
    'fdcb96': 'res 2, (iy+*)',
    'fdcb97': 'res 2, (iy+*)',
    'fdcb98': 'res 3, (iy+*)',
    'fdcb99': 'res 3, (iy+*)',
    'fdcb9a': 'res 3, (iy+*)',
    'fdcb9b': 'res 3, (iy+*)',
    'fdcb9c': 'res 3, (iy+*)',
    'fdcb9d': 'res 3, (iy+*)',
    'fdcb9e': 'res 3, (iy+*)',
    'fdcb9f': 'res 3, (iy+*)',
    'fdcba0': 'res 4, (iy+*)',
    'fdcba1': 'res 4, (iy+*)',
    'fdcba2': 'res 4, (iy+*)',
    'fdcba3': 'res 4, (iy+*)',
    'fdcba4': 'res 4, (iy+*)',
    'fdcba5': 'res 4, (iy+*)',
    'fdcba6': 'res 4, (iy+*)',
    'fdcba7': 'res 4, (iy+*)',
    'fdcba8': 'res 5, (iy+*)',
    'fdcba9': 'res 5, (iy+*)',
    'fdcbaa': 'res 5, (iy+*)',
    'fdcbab': 'res 5, (iy+*)',
    'fdcbac': 'res 5, (iy+*)',
    'fdcbad': 'res 5, (iy+*)',
    'fdcbae': 'res 5, (iy+*)',
    'fdcbaf': 'res 5, (iy+*)',
    'fdcbb0': 'res 6, (iy+*)',
    'fdcbb1': 'res 6, (iy+*)',
    'fdcbb2': 'res 6, (iy+*)',
    'fdcbb3': 'res 6, (iy+*)',
    'fdcbb4': 'res 6, (iy+*)',
    'fdcbb5': 'res 6, (iy+*)',
    'fdcbb6': 'res 6, (iy+*)',
    'fdcbb7': 'res 6, (iy+*)',
    'fdcbb8': 'res 7, (iy+*)',
    'fdcbb9': 'res 7, (iy+*)',
    'fdcbba': 'res 7, (iy+*)',
    'fdcbbb': 'res 7, (iy+*)',
    'fdcbbc': 'res 7, (iy+*)',
    'fdcbbd': 'res 7, (iy+*)',
    'fdcbbe': 'res 7, (iy+*)',
    'fdcbbf': 'res 7, (iy+*)',
    'fdcbc0': 'set 0, (iy+*)',
    'fdcbc1': 'set 0, (iy+*)',
    'fdcbc2': 'set 0, (iy+*)',
    'fdcbc3': 'set 0, (iy+*)',
    'fdcbc4': 'set 0, (iy+*)',
    'fdcbc5': 'set 0, (iy+*)',
    'fdcbc6': 'set 0, (iy+*)',
    'fdcbc7': 'set 0, (iy+*)',
    'fdcbc8': 'set 1, (iy+*)',
    'fdcbc9': 'set 1, (iy+*)',
    'fdcbca': 'set 1, (iy+*)',
    'fdcbcb': 'set 1, (iy+*)',
    'fdcbcc': 'set 1, (iy+*)',
    'fdcbcd': 'set 1, (iy+*)',
    'fdcbce': 'set 1, (iy+*)',
    'fdcbcf': 'set 1, (iy+*)',
    'fdcbd0': 'set 2, (iy+*)',
    'fdcbd1': 'set 2, (iy+*)',
    'fdcbd2': 'set 2, (iy+*)',
    'fdcbd3': 'set 2, (iy+*)',
    'fdcbd4': 'set 2, (iy+*)',
    'fdcbd5': 'set 2, (iy+*)',
    'fdcbd6': 'set 2, (iy+*)',
    'fdcbd7': 'set 2, (iy+*)',
    'fdcbd8': 'set 3, (iy+*)',
    'fdcbd9': 'set 3, (iy+*)',
    'fdcbda': 'set 3, (iy+*)',
    'fdcbdb': 'set 3, (iy+*)',
    'fdcbdc': 'set 3, (iy+*)',
    'fdcbdd': 'set 3, (iy+*)',
    'fdcbde': 'set 3, (iy+*)',
    'fdcbdf': 'set 3, (iy+*)',
    'fdcbe0': 'set 4, (iy+*)',
    'fdcbe1': 'set 4, (iy+*)',
    'fdcbe2': 'set 4, (iy+*)',
    'fdcbe3': 'set 4, (iy+*)',
    'fdcbe4': 'set 4, (iy+*)',
    'fdcbe5': 'set 4, (iy+*)',
    'fdcbe6': 'set 4, (iy+*)',
    'fdcbe7': 'set 4, (iy+*)',
    'fdcbe8': 'set 5, (iy+*)',
    'fdcbe9': 'set 5, (iy+*)',
    'fdcbea': 'set 5, (iy+*)',
    'fdcbeb': 'set 5, (iy+*)',
    'fdcbec': 'set 5, (iy+*)',
    'fdcbed': 'set 5, (iy+*)',
    'fdcbee': 'set 5, (iy+*)',
    'fdcbef': 'set 5, (iy+*)',
    'fdcbf0': 'set 6, (iy+*)',
    'fdcbf1': 'set 6, (iy+*)',
    'fdcbf2': 'set 6, (iy+*)',
    'fdcbf3': 'set 6, (iy+*)',
    'fdcbf4': 'set 6, (iy+*)',
    'fdcbf5': 'set 6, (iy+*)',
    'fdcbf6': 'set 6, (iy+*)',
    'fdcbf7': 'set 6, (iy+*)',
    'fdcbf8': 'set 7, (iy+*)',
    'fdcbf9': 'set 7, (iy+*)',
    'fdcbfa': 'set 7, (iy+*)',
    'fdcbfb': 'set 7, (iy+*)',
    'fdcbfc': 'set 7, (iy+*)',
    'fdcbfd': 'set 7, (iy+*)',
    'fdcbfe': 'set 7, (iy+*)',
    'fdcbff': 'set 7, (iy+*)',
    'fde1': 'pop iy',
    'fde3': 'ex (sp), iy',
    'fde5': 'push iy',
    'fde9': 'jp (iy)',
    'fdf9': 'ld sp, iy',
    'fe': 'cp *',
    'ff': 'rst 38h',
  };

  static String replaceOperand(String instruction, int byte, int highByte) {
    assert(instruction != null);

    if (instruction.contains('**')) {
      final word = createWord(byte, highByte);
      instruction.replaceFirst('**', '0x${toHex32(word)}');
    } else {
      final offset = (byte <= 0x7F && byte > 0 ? byte : twocomp8(byte));

      // handle ix+* cases where * is a negative number
      if (instruction.contains('+*') && byte < 0) {
        instruction.replaceFirst('+*', offset.toString());
      }
      // else just substitute the * for the value, whether positive or negative
      else if (instruction.contains('*')) {
        instruction.replaceFirst('*', offset.toString());
      }
    }

    return instruction;
  }

  // Z80 instructions are no more than four bytes, including displacements.
  // This method uses the decode table above to translate instructions into
  // strings for debugging purposes.
  static String decode(int inst1, int inst2, int inst3, int inst4) {
    assert(inst1 > 0x00);
    assert(inst1 <= 0xFF);
    assert(inst2 > 0x00);
    assert(inst2 <= 0xFF);
    assert(inst3 > 0x00);
    assert(inst3 <= 0xFF);
    assert(inst4 > 0x00);
    assert(inst4 <= 0xFF);

    switch (inst1) {
      case 0xED: // extended instructions
        return replaceOperand(
            z80Opcodes[toHex16(inst1) + toHex16(inst2)], inst3, inst4);

      case 0xCB: // bit instructions
        // none of these have displacement values, so don't bother to escape
        // with replaceOperand()
        return z80Opcodes[toHex16(inst1) + toHex16(inst2)];

      case 0xDD:
      case 0xFD:
        // IX or IY instructions
        if (inst2 == 0xCB) // IX or IY bit instructions
        {
          // IX and IY bit instructions are formatted DDCB**XX,
          // where ** is the displacement and XX is the opcode that determines
          // which instruction type. We map these as DDCBXX, so we skip
          // inst3 when searching the map.
          return replaceOperand(
              z80Opcodes[toHex16(inst1) + toHex16(inst2) + toHex16(inst4)],
              inst3,
              0);
        }
        return replaceOperand(z80Opcodes[toHex16(inst1)], inst2, inst3);

      default:
        return replaceOperand(z80Opcodes[toHex16(inst1)], inst2, inst3);
    }
  }

  static int getInstructionLength(int inst1, int inst2, int inst3, int inst4) {
    assert(inst1 > 0x00);
    assert(inst1 <= 0xFF);
    assert(inst2 > 0x00);
    assert(inst2 <= 0xFF);
    assert(inst3 > 0x00);
    assert(inst3 <= 0xFF);
    assert(inst4 > 0x00);
    assert(inst4 <= 0xFF);

    switch (inst1) {
      case 0xED: // extended instructions
        if ([0x43, 0x53, 0x63, 0x73, 0xb4, 0x4b, 0x5b, 0x6b, 0x7b]
            .contains(inst2)) {
          return 3;
        }
        return 1;

      case 0xCB: // bit instructions
        // none of these have displacement values
        return 2;

      case 0xDD:
      case 0xFD:
        // IX or IY instructions
        if (inst2 == 0xCB) // IX or IY bit instructions
        {
          // IX and IY bit instructions are all formatted DDCB**XX
          return 4;
        }

        if ([
          0x70, 0x71, 0x72, 0x73, 0x34, 0x74, 0x35, 0x75, 0x26, 0x36, //
          0x46, 0x56, 0x66, 0x86, 0x96, 0xa6, 0xb6, 0x77, 0x2e, 0x4e,
          0x5e, 0x6e, 0x76, 0x8e, 0x9e, 0xae, 0xbe
        ].contains(inst2)) {
          return 3;
        }

        if ([
          0x21, 0x22, 0x2a, //
        ].contains(inst2)) {
          return 4;
        }

        return 2;

      default:
        if ([
          0x10, 0x20, 0x30, 0xd3, 0x06, 0x16, 0x26, 0x36, 0xc6, 0xd6, //
          0xe6, 0xf6, 0x18, 0x28, 0x38, 0xdb, 0x0e, 0x1e, 0x2e, 0x3e, //
          0xce, 0xde, 0xee, 0xfe
        ].contains(inst1)) {
          return 2;
        }
        if ([
          0x01, 0x11, 0x21, 0x31, 0x22, 0x32, 0xc2, 0xd2, 0xe2, 0xf2, //
          0xc3, 0xc4, 0xd4, 0xe4, 0xf4, 0x2a, 0x3a, 0xca, 0xda, 0xea, //
          0xfa, 0xcc, 0xdc, 0xec, 0xfc, 0xcd
        ].contains(inst1)) {
          return 3;
        }
        return 1;
    }
  }
}
